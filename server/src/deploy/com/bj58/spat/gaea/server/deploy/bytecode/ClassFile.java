/*
 *  Copyright Beijing 58 Information Technology Co.,Ltd.
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package com.bj58.spat.gaea.server.deploy.bytecode;

import com.bj58.spat.gaea.server.contract.log.ILog;
import com.bj58.spat.gaea.server.contract.log.LogFactory;
import com.bj58.spat.gaea.server.util.SourceCodeFormatter;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;

/**
 * 字节码类文件
 * @author Service Platform Architecture Team (spat@58.com)
 */
public class ClassFile {
	private static ILog logger = LogFactory.getLogger(ClassFile.class);
	/**
	 * 类的名称
	 */
	private String clsName;
	/**
	 * 类的源代码
	 */
	private StringBuilder sourceCode=new StringBuilder();
	/**
	 * 类文件的字节数组
	 */
	private byte[] clsByte;

	public ClassFile( String clsName ){
		this( clsName , null );
	}
	
	public ClassFile(String clsName, byte[] clsByte){
		this.setClsName(clsName);
		this.setClsByte(clsByte);

		Calendar now = Calendar.getInstance();
		this.sourceCode.append( "/**" );
		this.sourceCode.append( "* This source code is automatically generated by ProxyClassCreater." );
		this.sourceCode.append( "* @author " ).append( "Machine" );
		this.sourceCode.append( "* @date " ).append( now.get(Calendar.YEAR) ).append("-").append( now.get(Calendar.MONTH)+1 ).append("-").append(now.get(Calendar.DAY_OF_MONTH));
		this.sourceCode.append( "* @timestamp " ).append( now.getTimeInMillis() );
		this.sourceCode.append( "*/" );
	}

	
	public String getClsName() {
		return clsName;
	}
	public void setClsName(String clsName) {
		this.clsName = clsName;
	}
	public byte[] getClsByte() {
		return clsByte;
	}
	public void setClsByte(byte[] clsByte) {
		this.clsByte = clsByte;
	}

	/**
	 * 追加源代码
	 * @param code
	 * @return
	 */
	public StringBuilder appendSourceCode( String code ){
		return sourceCode.append(code);
	}

	/**
	 * 获取源代码
	 * @return
	 */
	public String getSourceCode(){
		return SourceCodeFormatter.formJava( sourceCode.toString() );
	}

	/**
	 * 将源文件输出到文件
	 */
	public void toFile( File directory ){
		logger.info("directory is :" + directory);
		if (!directory.exists()) {
			directory.mkdirs();
		}

		String classFileName = clsName+".java";
		BufferedWriter w = null;
		try {
			w = new BufferedWriter( new FileWriter( directory.getPath()+File.separator+classFileName ) );
			w.write( getSourceCode() );
			w.flush();
		} catch (IOException e) {
		} finally {
			if (w!=null){
				try {
					w.close();
				} catch (IOException e) {
				}
			}
		}

	}
}
